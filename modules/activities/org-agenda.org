#+TITLE: Org-agenda

* Org-agenda

#+BEGIN_SRC emacs-lisp

(setq org-directory "~/org/")
(setq org-file-inbox (concat org-directory "inbox.org"))
(setq org-file-brain (concat org-directory "notes/inbox.org"))
(setq org-file-journal (concat org-directory "/archive/journal/journal.org"))
(setq org-file-reference (concat org-directory "reference.org"))
(setq org-file-calendar (concat org-directory "calendar.org"))



(setq org-agenda-span 'day)

(setq org-agenda-files (list
                        "~/org/"
                        "~/org/projects/"
                        "~/Public/wage-theft-app/"
;                        "~/org/archive/web.org"
;                        "~/org/archive/filenametimestamps.org"
                        ))


(advice-add 'org-agenda-goto :after
            (lambda (&rest args)
              (org-narrow-to-subtree)))

;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)

;; Compact the block agenda view
(setq org-agenda-compact-blocks t)


(setq org-agenda-window-setup 'current-window)



(setq
 org-agenda-custom-commands
 (quote
  (
("S" "Scheduled" 
     ((agenda "" 
       ((org-agenda-start-day "+0")
        (org-agenda-span 14)        
        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "CANCELLED" "HOLD")))
       ))))


   ("n" "Next Tasks" tags-todo "-CANCELLED/!NEXT"
    ((org-agenda-overriding-header
      (concat "Next Tasks"
              (if bh/hide-scheduled-and-waiting-next-tasks
                  ""
                " (including WAITING and SCHEDULED tasks)")))
     (org-tags-match-list-sublevels t)
     (org-agenda-todo-ignore-scheduled
      bh/hide-scheduled-and-waiting-next-tasks)
     (org-agenda-todo-ignore-deadlines
      bh/hide-scheduled-and-waiting-next-tasks)
     (org-agenda-sorting-strategy
      '(priority-down todo-state-down effort-up category-keep))))


   ("p" "Projects" (


(tags-todo "-HOLD-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-tags-match-list-sublevels 'indented)
                                (org-agenda-sorting-strategy
                                 '(priority-down category-keep))))

     (tags-todo "-CANCELLED/!NEXT"
                ((org-agenda-overriding-header
                  (concat "Project Next Tasks"
                          (if bh/hide-scheduled-and-waiting-next-tasks
                              ""
                            " (including WAITING and SCHEDULED tasks)")))
                 (org-agenda-skip-function
                  'bh/skip-projects-and-habits-and-single-tasks)
                 (org-tags-match-list-sublevels t)
                 (org-agenda-todo-ignore-scheduled
                  bh/hide-scheduled-and-waiting-next-tasks)
                 (org-agenda-todo-ignore-deadlines
                  bh/hide-scheduled-and-waiting-next-tasks)
;                 (org-agenda-todo-ignore-with-date
;                  bh/hide-scheduled-and-waiting-next-tasks)
                 (org-agenda-sorting-strategy
                  '(todo-state-down effort-up category-keep))))

                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header
                                 (concat "Project Subtasks"
                                         (if bh/hide-scheduled-and-waiting-next-tasks
                                             ""
                                           " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                (org-agenda-todo-ignore-scheduled
                                 bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines
                                 bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(priority-down category-keep))))


(tags-todo "-CANCELLED/!" ((org-agenda-overriding-header "Stuck Projects")
                                                    (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                                    (org-agenda-sorting-strategy
                                                     '(priority-down))))


                    nil))






   ("t" "Tasks" ((tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!-NEXT"
                            ((org-agenda-overriding-header
                              (concat "Actions"
                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                          ""
                                        " (including WAITING and SCHEDULED tasks)")))
                             (org-agenda-skip-function 'bh/skip-project-tasks)
                             (org-agenda-todo-ignore-scheduled
                              bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-deadlines
                              bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-sorting-strategy
                              '(priority-down category-keep))))))

   ("s" "Someday/Maybe" (
                         (tags-todo "-CANCELLED-WAITING/+HOLD"
                                    ((org-agenda-overriding-header
                                      (concat "Someday/Maybe"
                                              (if bh/hide-scheduled-and-waiting-next-tasks
                                                  ""
                                                " (including WAITING and SCHEDULED tasks)")))
                                     (org-agenda-skip-function 'bh/skip-non-tasks)
                                     (org-tags-match-list-sublevels nil)
                                     (org-agenda-todo-ignore-scheduled
                                      bh/hide-scheduled-and-waiting-next-tasks)
                                     (org-agenda-todo-ignore-deadlines
                                      bh/hide-scheduled-and-waiting-next-tasks)
                                     (org-agenda-sorting-strategy '(priority-down todo-state-down category-keep))))))

   ("w" "Waiting" ((tags "-REFILE/+WAITING"
                           ((org-agenda-overriding-header "Waiting for")
                            (org-tags-match-list-sublevels nil)))))

   ("D" "Delegated" ((tags "-REFILE/+DELEGATE"
                           ((org-agenda-overriding-header "Delegated")
                            (org-tags-match-list-sublevels nil)))))


   ("c" "Completed" ((tags "-REFILE/+DONE"
                           ((org-agenda-overriding-header "Done")
                            (org-tags-match-list-sublevels nil)))))

   ("h" "Habits"
    ((agenda
      ""
      ((org-habit-show-all-today t)
       (org-habit-show-habits t)
       (org-agenda-skip-function 'cwebber/skip-unless-habit)))))


   )))



(defun cwebber/skip-unless-habit ()
  "Checks to see if the style at point is \"habit\""
  (if (not (equal (org-entry-get (point) "STYLE") "habit"))
                                        ; Skip till the next heading
      (progn (outline-next-heading) (1- (point)))))

(setq org-agenda-timegrid-use-ampm t)

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))


(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

 PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))



(defun bh/org-auto-exclude-function (tag)
  "Automatic task exclusion in the agenda with / RET"
  (and (cond
        ((string= tag "hold")
         t)
        ((string= tag "farm")
         t))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)

(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"
                            :min-duration 0
                            :max-gap 0
                            :gap-ok-around ("4:00"))))

;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

;; Agenda log mode items to display (closed and state changes by default)
(setq org-agenda-log-mode-items (quote (closed clock state)))

;; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)

;; Erase all reminders and rebuilt reminders for today from the agenda
(defun bh/org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

;; Rebuild the reminders everytime the agenda is displayed
(add-hook 'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)

;; ;; WARNING!!! Following function call will drastically increase spacemacs launch time.
;; ;; This is at the end of my .emacs - so appointments are set up when Emacs starts

;; Activate appointments so we get notifications,
;; but only run this when emacs is idle for 15 seconds
(run-with-idle-timer 15 nil (lambda () (appt-activate t)))

;; If we leave Emacs running overnight - reset the appointments one minute after midnight
(run-at-time "24:01" nil 'bh/org-agenda-to-appt)

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (bh/narrow-to-org-subtree)
        (org-show-todo-tree nil))
    (bh/narrow-to-org-subtree)
    (org-show-todo-tree nil)))


;; Narrow/widen in org-mode agenda

;; Force showing the next headline.
(setq org-show-entry-below (quote ((default))))

(defun bh/widen ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-agenda-remove-restriction-lock)
    (widen)
    (org-agenda-remove-restriction-lock)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" 'bh/widen))
          'append)

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
 I don't use follow mode very often but I restrict to file all the time
 so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (if (equal major-mode 'org-agenda-mode)
        (bh/set-agenda-restriction-lock 4)
      (widen))))


(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-to-org-subtree))
    (bh/narrow-to-org-subtree)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N"
                                  'bh/narrow-to-subtree))
          'append)

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (org-get-at-bol 'org-hd-marker)
        (bh/narrow-up-one-org-level))
    (bh/narrow-up-one-org-level)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U"
                                  'bh/narrow-up-one-level))
          'append)

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/get-pom-from-agenda-restriction-or-point ()
  (or (org-get-at-bol 'org-hd-marker)
      (and (marker-position org-agenda-restrict-begin)
           org-agenda-restrict-begin)
      (and (equal major-mode 'org-mode) (point))
      org-clock-marker))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
        (bh/narrow-to-org-project))
    (bh/narrow-to-org-project)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P"
                                  'bh/narrow-to-project))
          'append)

(defvar bh/current-view-project nil)

(defun bh/view-next-project ()
  (interactive)
  (unless (marker-position org-agenda-restrict-begin)
    (goto-char (point-min))
    (re-search-forward "^Projects$")
    (setq bh/current-view-project (point)))
  (bh/widen)
  (goto-char bh/current-view-project)
  (forward-visible-line 1)
  (setq bh/current-view-project (point))
  (if (org-get-at-bol 'org-hd-marker)
      (bh/narrow-to-project)
    (message "All projects viewed.")
    (ding)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "V"
                                  'bh/view-next-project))
          'append)

(defun bh/set-agenda-restriction-lock (arg)
  "Set restriction lock to current task subtree or file if prefix is specified"
  (interactive "p")
  (let* ((pom (bh/get-pom-from-agenda-restriction-or-point))
         (tags (org-with-point-at pom (org-get-tags-at))))
    (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
      (save-restriction
        (cond
         ((and (equal major-mode 'org-agenda-mode) pom)
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type)))
         ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
          (org-agenda-set-restriction-lock 'file))
         (pom
          (org-with-point-at pom
            (org-agenda-set-restriction-lock restriction-type))))))))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<"
                                  'bh/set-agenda-restriction-lock))
          'append)

;; Limit restriction lock highlighting to the headline only
(setq org-agenda-restriction-lock-highlight-subtree nil)

;; Always hilight the current agenda line
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)

;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done nil)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done nil)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done nil)

;; Skip scheduled items if they are repeated beyond the current deadline.
(setq org-agenda-skip-scheduled-if-deadline-is-shown  (quote repeated-after-deadline))

(setq org-agenda-include-diary nil)
(setq org-agenda-insert-diary-extract-time t)

;; Include agenda archive files when searching for things
                                        ;(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

(setq org-default-notes-file "~/org/notes/inbox.org")


(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(global-set-key "\C-cb" 'org-switchb)

;; Custom Key Bindings
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f10>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

(global-set-key (kbd "<f9> i") 'bh/punch-in)
(global-set-key (kbd "<f9> o") 'bh/punch-out)

                                        ; (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

                                        ; (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> S") 'org-save-all-org-buffers)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "S-<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (outline-hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

;; (defun bh/make-org-scratch ()
;;   (interactive)
;;   (find-file "/tmp/publish/scratch.org")
;;   (gnus-make-directory "/tmp/publish"))

;; (defun bh/switch-to-scratch ()
;;   (interactive)
;;   (switch-to-buffer "*scratch*"))

;; =TODO= state keywords and colour settings:
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w)" "HOLD(h)" "DELEGATE(D)" "|" "CANCELLED(c@/!)" "MEETING" "SCHEDULED"))))

;; ;; TODO Other todo keywords doesn't have appropriate faces yet. They should
;; ;; have faces similar to spacemacs defaults.
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "#007cee" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("DELEGATE" :foreground "purple" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "red" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("SCHEDULED" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t)

;; This cycles through the todo states but skips setting timestamps and
;; entering notes which is very convenient when all you want to do is fix
;; up the status of an entry.
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))



;; Capture templates for: TODO tasks, Notes, appointments, phone calls,
;; meetings, and org-protocol
(setq org-capture-templates
      (quote (
              ("t" "Task" entry (file org-file-inbox) "* TODO %? \n:PROPERTIES:\n:CREATED: %T\n:END:" :clock-in t :clock-resume t)
              ("n" "Note" entry (file org-file-inbox) (file "~/.emacs.d/templates/zettel.tmplt"))
;              ("j" "Journal" entry (file+headline org-file-inbox "Notes") (file "~/.emacs.d/templates/journal.tmplt"))
              ("e" "Event" entry (file+headline org-file-calendar "Calendar") 
	       "* %^{Event}
%^{When?}t
   :PROPERTIES:
   :CREATED: %T
   :LOCATION: %^{Where?}
   :END:  
 %? " :clock-in t :clock-resume t)

                                        ;              ("cm" "Meeting" entry (file+datetree org-file-journal) "* MEETING with %? :MEETING:\n :PROPERTIES:\n :CREATED: %U\n :END:\n" :clock-in t :clock-resume t)
                                        ;              ("ct" "Tickler" entry (file+headline org-file-calendar "Tickler") "* %i%? :TICKLER: \n %U")
                                        ;              ("ej" "Journal Entry" entry (file+datetree org-file-journal) "* %^{Thought:} :crypt:\n :PROPERTIES:\n :CREATED: %T\n :END:\n %?")

              ;; ("a" "PDF" entry (file+headline "~/org/notes/inbox.org" "Article") "* %^{Title} %(org-set-tags-command)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"
              ;;  :prepend t
              ;;  :empty-lines 1
              ;;  :created t
              ;; )

                                        ;              ("c" "Calendar")



              )))




(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9)
                                 )))

(setq org-refile-use-outline-path 'file
      org-indent-indentation-per-level nil
      org-outline-path-complete-in-steps nil)


;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))


		;;;; Refile settings
;; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)

(setq org-log-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
                                        ;(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
(setq org-clock-auto-clock-resolution nil)
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
;; Resolve open clocks if the user is idle for more than 10 minutes.
(setq org-clock-idle-time 10)
;;
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
		Skips capture tasks, projects, and subprojects.
		Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
		selected task.  If no task is selected set the Organization task
		as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ;; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "9448a240-9d67-438f-8872-dad8a4e4b07e")
(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
		Skip the default task and get the next one.
		A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))

(setq org-time-stamp-rounding-minutes (quote (1 1)))
;; ;; Sometimes I change tasks I'm clocking quickly - this removes clocked
;; ;; tasks with 0:00 duration
;; (setq org-clock-out-remove-zero-time-clocks t)

;; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format
      "%1PRIORITY %50ITEM %13AREA %10DEADLINE %50OUTCOME %10Effort(Effort){:} %10CLOCKSUM")
;; global Effort estimate values
;; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
;; Tags with fast selection keys
(setq org-tag-alist (quote ((:startgroup)
                                        ;                            ("@errand" . ?e)
                                        ;                            ("@home" . ?H)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                                        ;                            ("PERSONAL" . ?P)
                                        ;                            ("WORK" . ?W)
                                        ;                            ("ORG" . ?O)
                                        ;                            ("crypt" . ?E)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?c)
                            ("FLAGGED" . ??))))

(setq org-agenda-hide-tags-regexp "noexport\\|today\\|HOLD\\|REFILE\\|ARCHIVE\\|NOW\\|ignore\\|WAITING\\|nobrain\\|connect\\|clarify\\|capture\\|ATTACH")

;; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))
;; Disable the default org-mode stuck projects agenda view
(setq org-stuck-projects (quote ("" nil nil "")))

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
		Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
                  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
                  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-non-tasks ()
  "Show non-project tasks.
		Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-task-p)
        nil)
       (t
        next-headline)))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
		When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
		When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
		Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
		Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))

(setq org-archive-mark-done nil)

(setq org-archive-location "~/org/archive/%s_archive::/datetree/* Archived Tasks")



(defun bh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

(setq org-list-allow-alphabetical t)

;; ;; Explicitly load required exporters
;; (require 'ox-html)
;; (require 'ox-latex)
;; (require 'ox-ascii)
(setq org-ditaa-jar-path "~/.emacs.d/ditaa0_9/ditaa0_9.jar")
                                        ;       (setq org-plantuml-jar-path "~/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

;; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (python . t)
         (gnuplot . t)
         (shell . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

;; Do not prompt to confirm evaluation
;; This may be dangerous - make sure you understand the consequences
;; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

;; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

;; Don't enable this because it breaks access to emacs from my
;; Android phone
(setq org-startup-with-inline-images t)
(setq org-startup-folded 'showeveryting)
(setq org-agenda-sticky t)

;; Include the todo keywords
(setq org-fast-tag-selection-include-todo t)


(global-set-key "\C-c\C-e" 'eval-buffer)


(defun my/org-clock-in ()
  (interactive)
  (org-clock-in '(4))
  )

(defun my/org-goto-current-datetree-entry ()
  "Open current day in log.org datetree in indirect buffer.  With prefix, open in real buffer."
  (interactive)
  (let* ((filename org-file-journal)
         (buffer (or (org-find-base-buffer-visiting filename)
                     (find-file-noselect filename)
                     (error "Unable to find buffer for file: %s" filename))))
    (switch-to-buffer buffer)
    (org-set-startup-visibility)
    (org-datetree-find-date-create (list (string-to-number (format-time-string "%m"))
                                         (string-to-number (format-time-string "%d"))
                                         (string-to-number (format-time-string "%Y"))))
    (org-cycle)
    (unless current-prefix-arg
      (org-narrow-to-subtree))))


(defun my/org-agenda-switch-to()
  "Jumps to a specific task."
  (interactive)
  (call-interactively 'org-agenda-switch-to)
  (org-cycle)
  (org-narrow-to-subtree)
  (outline-show-branches))

(defun counsel-jump-to-register ()
  "Jump to register with markers"
  (interactive)
  (ivy-read
   "Register: "
   (mapcar (lambda (register-alist-entry)
             (if (markerp (cdr register-alist-entry))
                 (let* ((mk (cdr register-alist-entry))
                        (buf (marker-buffer mk)))
                   (concat (char-to-string (car register-alist-entry))
                           "    "
                           (if (null buf)
			       "in no buffer"
                             (concat (buffer-name buf) ":"
                                     (number-to-string (marker-position mk))))))))
           register-alist)
   :require-match t
   :initial-input "^"
   :history 'counsel-jump-toregister
   :caller 'counsel-jump-toregister
   :action (lambda (register-line)
             (jump-to-register (elt register-line 0)))
   ))

                                        ; (setq recenter-positions '(middle top bottom))
(add-hook 'jump-to-register #'recenter-top-bottom)



(defun my/org-jump-to-heading ()
  "Jumps to a specific heading."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-refile)
    (org-narrow-to-subtree)))

(defun my/org-agenda-goto-narrow ()
  "Jumps to a specific task."
  (interactive)
  (call-interactively 'org-agenda-goto)
  (org-narrow-to-subtree)
  (outline-show-branches)
  )


(require 'org-agenda)

(bind-key "<tab>" #'my/org-agenda-goto-narrow org-agenda-mode-map)
(bind-key "RET" #'my/org-agenda-switch-to org-agenda-mode-map)
(bind-key ";" #'org-agenda-workflow org-agenda-mode-map)
(bind-key "i" #'org-agenda-clock-in org-agenda-mode-map)
(bind-key "I" #'org-pomodoro org-agenda-mode-map)
(bind-key "o" #'org-agenda-clock-out org-agenda-mode-map)
(bind-key "k" #'org-capture org-agenda-mode-map)


(defun worf-refile-targets (maxlevel)
  (cons (cons (cl-set-difference
	       (delq nil
                     (mapcar
                      (lambda (b)
                        (let ((name (buffer-file-name b)))
                          (and name
			       (string-match "org$" (buffer-file-name b))
			       name)))
                      (buffer-list)))
	       org-agenda-files
	       :test 'equal)
              (cons :maxlevel maxlevel))
        (cl-remove-if
         (lambda (x) (null (car x)))
         org-refile-targets)))


(defun update-agenda ()
  "Switch to the `*scratch*' buffer. Create it first if needed."
  (interactive)
  ;; (org-store-agenda-views)
  ;; (find-file-noselect "~/brain/projects/review/export-today.org")
  ;; (set-buffer "export-today.org")
  ;; (mark-whole-buffer)
  ;; (org-sort-entries t ?O)
  ;; (save-buffer-always)
  (org-save-all-org-buffers)
  (set-buffer "gtd.org")
  (goto-char (point-min))
  (org-hugo-auto-export-mode 1)
  (search-forward "#+BEGIN: clocktable")
  (org-ctrl-c-ctrl-c)
  (goto-char (point-min))
  (save-buffer-always)
  )


(setq appt-display-diary nil)
(appt-activate t)
(setq appt-display-interval 5)
(setq appt-message-warning-time 15)
(setq appt-display-mode-line t)
(display-time)
(setq appt-display-format 'window)
(setq appt-disp-window-function #'ora-appt-display)
(run-at-time "1 hour" 3600 #'ora-org-agenda-to-appt)
(remove-hook 'org-finalize-agenda-hook #'ora-org-agenda-to-appt)
(add-hook 'org-finalize-agenda-hook #'ora-org-agenda-to-appt)

(defun ora-appt-display (min-to-app new-time msg)
  "our little façade-function for ora-org-popup"
  (ora-org-popup (format "Appointment in %s minute(s)" min-to-app) msg
                 "~/Pictures/Icons/Gnome-appointment-soon.png") )

(defun ora-org-agenda-to-appt ()
  "Erase all reminders and rebuild reminders for today from the agenda"
  (interactive)
  ;; (setq appt-time-msg-list nil)
  (org-agenda-to-appt))


                                        ; (bh/org-agenda-to-appt)

(defun ora-start-process (cmd)
  (start-process
   cmd nil shell-file-name
   shell-command-switch
   (format "nohup 1>/dev/null 2>/dev/null %s" cmd)))

(defun ora-org-popup (title msg &optional icon sound)
  "Show a popup if we're on X, or echo it otherwise; TITLE is the title
           of the message, MSG is the context. Optionally, you can provide an ICON and
           a sound to be played"
  (interactive)
  (if (eq window-system 'x)
      (progn
        (notifications-notify
         :title title
         :body msg
         :app-icon icon
         :urgency 'low)
        (ora-start-process
         (concat "mplayer -really-quiet " sound " 2> /dev/null")))
    ;; text only version
    (message (concat title ": " msg))))


(defalias 'insert-string 'insert)


;; Record time and note when the scheduled date of a task is modified
(setq org-log-reschedule 'note)

;; Record time and note when the deadline of a task is modified
(setq org-log-redeadline 'note)

;; Record time and note when clocking out of a task
(setq org-log-clock-out 'note)

;; Record time and note when a task is refiled
                                        ;  (setq org-log-refile 'note)

;; Disable when refiled from org-capture
(define-advice org-capture-refile (:around (oldfunc &rest args) org-disable-log-refile)
  "Set `org-log-refile' to nil while capturing."
  (let ((org-log-refile nil))
    (apply oldfunc args)))


(setq lpr-command "gtklp")

(add-to-list 'org-modules 'org-habit)

(require 'org-habit)


(setq org-modules '(org-habit
                    org-timer
                    org-collector))

(setq org-habit-show-habits-only-for-today t)
(setq org-agenda-tags-column -100
      org-habit-graph-column 45
      org-habit-preceding-days 28
      org-agenda-start-with-log-mode nil)

(setq org-habit-show-habits nil)

(setq org-hide-leading-stars t)

(setq org-hide-emphasis-markers t)

(defmacro org-todo-save-files (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))

(defvar org-blocks-hidden nil)

(add-hook 'org-capture-prepare-finalize-hook 'org-id-store-link)

(defadvice org-switch-to-buffer-other-window
    (after supress-window-splitting activate)
  "Delete the extra window if we're in a capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defun activate-capture-frame ()
  "run org-capture in capture frame"
  (select-frame-by-name "capture")
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (org-capture))


(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (when (and (equal "capture" (frame-parameter nil 'name))
             (not (eq this-command 'org-capture-refile)))
    (delete-frame)))

(defadvice org-capture-refile
    (after delete-capture-frame activate)
  "Advise org-refile to close the frame"
  (delete-frame))

(setq org-agenda-exporter-settings
      '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))

(defun eos/org-clock-in ()
  (interactive)
  (org-clock-in '(4))
  )




(setq org-confirm-babel-evaluate nil
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation t
      org-src-window-setup 'current-window)

 #+END_SRC

 
* org-attach
#+BEGIN_SRC emacs-lisp
 (setq org-attach-auto-tag nil)
 (setq org-attach-method 'mv)

#+END_SRC

* org-insert-file
#+BEGIN_SRC emacs-lisp
 (defun org-insert-file (fiename)
 "Insert Elisp code block recreating file named FILENAME."
 (interactive "f")
 (let ((base64-string
 (with-temp-buffer
 (insert-file-contents-literally filename)
 (base64-encode-region (point-min) (point-max))
 (buffer-string))))
 (insert (format "#+BEGIN_SRC emacs-lisp :results output silent\n  (with-temp-file %S\n    (insert (base64-decode-string\n      %S)))\n#+END_SRC" filename base64-string))))


#+END_SRC


* org-jump
#+BEGIN_SRC emacs-lisp
 (defun my/org-jump ()
 "Jumps to a specific task."
 (interactive)
 (let ((current-prefix-arg '(4)))
 (call-interactively 'org-refile)))
#+END_SRC


* bjm capture
  :PROPERTIES:
  :ID:       84aea771-b96b-4b93-84b5-c0ba8c7053ac
  :END:
   :LOGBOOK:
   CLOCK: [2019-04-14 Sun 10:15]--[2019-04-14 Sun 10:38] =>  0:23
   :END:
#+BEGIN_SRC emacs-lisp
 (defun bjm/org-capture-todo ()
 (interactive)
 "Capture a TODO item"
 (org-capture nil "t"))

 (defun bjm/current-clocked-in ()
 (interactive)
 "Capture a TODO item"
 (org-capture nil "n"))

 (defun bjm/org-capture-note ()
 (interactive)
 "Capture a TODO item"
 (org-capture nil "n"))

 (defun bjm/org-capture-brain ()
 (interactive)
 "Capture a TODO item"
 (org-capture nil "b"))

 (defun bjm/org-agenda ()
 (interactive)
 "Capture a TODO item"
 (org-agenda nil "a")
 )

 (defun bjm/org-someday ()
 (interactive)
 "Capture a TODO item"
 (org-agenda nil "s")
 )

 (defun bjm/org-timeline ()
 (interactive)
 "Capture a TODO item"
(my-memacs-org-agenda
 ))



 (defun bjm/org-agenda-note ()
 (interactive)
 "Capture a TODO item"
 (org-agenda nil "n"))

 (defun bjm/org-capture-ref ()
 (interactive)
 "Capture a Ref item"
 (org-capture nil "r"))

 (defun bjm/org-capture-journal ()
 (interactive)
 "Capture a Ref item"
 (org-capture nil "j"))

 (defun bjm/org-capture-audio ()
 (interactive)
 "Capture a Ref item"
 (org-capture nil "a"))


 (defun bjm/org-capture-zettel ()
 (interactive)
 "Capture a clocked item"
 (org-capture nil "n"))

 (defun bjm/org-capture-event ()
 (interactive)
 "Capture a clocked item"
 (org-capture nil "e"))


(defun my/org-brain-visualize-current ()
  (interactive)
  (org-brain-visualize (org-brain-entry-at-pt))
  (delete-other-windows))


(defun my/howm-search-agenda ()
  (interactive)
  (howm-files-in-directory "~/org/"))



(defun my/agenda-exit ()
  (interactive)
  (delete-other-windows)
  (org-agenda-exit))

(define-key org-agenda-mode-map "q"'my/agenda-exit)

(defun my/scheduled ()
  (interactive)
  (org-agenda nil "S")
  (setq org-agenda-follow-mode 1))

(defun my/next-tasks ()
  (interactive)
  (org-agenda nil "n")
  (setq org-agenda-follow-mode 1))

(defun my/projects ()
  (interactive)
  (org-agenda nil "p")
  (setq org-agenda-follow-mode 1))

(defun my/actions ()
  (interactive)
  (org-agenda nil "t")
  (setq org-agenda-follow-mode 1))

(defun my/someday ()
  (interactive)
  (org-agenda nil "s")
  (setq org-agenda-follow-mode 1))


(defun my/waiting ()
  (interactive)
  (org-agenda nil "w")
  (setq org-agenda-follow-mode 1))


(defun my/delegated ()
  (interactive)
  (org-agenda nil "D")
  (setq org-agenda-follow-mode 1))


(defun my/completed ()
  (interactive)
  (org-agenda nil "c")
  (setq org-agenda-follow-mode 1))



 (define-key global-map (kbd "C-1") 'bjm/org-capture-todo)
 (define-key global-map (kbd "C-2") 'bjm/org-capture-zettel)
 (define-key global-map (kbd "C-3") 'bjm/org-capture-event)
 (define-key global-map (kbd "C-4") 'my/howm-create)
 (define-key global-map (kbd "<f1>") 'my/org-brain-visualize-current)


; (define-key global-map (kbd "C-2") 'bjm/org-capture-zettel)
; (define-key global-map (kbd "C-4") 'bjm/org-capture-journal)

; (define-prefix-command 'my-digit-map)
; (global-set-key (kbd "C-0") 'my-digit-map)
; (define-key 'my-digit-map (kbd "1") 'my/howm-create)


#+END_SRC
