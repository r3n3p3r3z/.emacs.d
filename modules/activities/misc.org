#+TITLE: Misc

* functions
#+BEGIN_SRC emacs-lisp
 (defun xah-show-in-desktop ()
   "Show current file in desktop.
  (Mac Finder, Windows Explorer, Linux file manager)

 URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
 Version 2018-09-29"
   (interactive)
   (let (($path (if (buffer-file-name) (buffer-file-name) default-directory )))
     (cond
      ((string-equal system-type "gnu/linux")
       (let (
             (process-connection-type nil)
             (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                  "/usr/bin/gvfs-open"
				"/usr/bin/xdg-open")))
         (start-process "" nil openFileProgram $path))
       ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus
       ))))


 (defun xah-open-in-external-app (&optional file)
   "Open the current file or dired marked files in external app.

 The app is chosen from your OS's preference."
   (interactive)
   (let ( doIt
          (myFileList
           (cond
            ((string-equal major-mode "dired-mode") (dired-get-marked-files))
            ((not file) (list (buffer-file-name)))
            (file (list file)))))

     (setq doIt (if (<= (length myFileList) 5)
                    t
                  (y-or-n-p "Open more than 5 files? ") ) )

     (when doIt
       (cond
	((string-equal system-type "gnu/linux")
         (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList))))))




(setq org-expiry-created-property-name "CREATED")


 (defun my/insert-created-timestamp()
   "Insert a CREATED property using org-expiry.el for TODO entries"
   (org-entry-put nil "CREATED" (format-time-string "<%Y-%m-%d %a %H:%M>"))
   (org-expiry-insert-created)
   (org-back-to-heading)
   (org-end-of-line)
   (insert " "))

 (setq org-return-follows-link t)

 (setq org-attach-directory "~/org/notes/data/")

 (defun org-archive-done-tasks ()
   (interactive)
   (org-map-entries 'org-archive-subtree "/DONE" 'file))


 (global-set-key (kbd "C-x o") #'other-window)

 (setq org-show-context-detail
       '((agenda . lineage) ;; instead of "local"
         (bookmark-jump . lineage)
         (isearch . lineage)
         (default . ancestors))
       )

 (setq org-catch-invisible-edits "smart")

 (defvar my-cpp-other-file-alist
 '(("\\.org\\'" (".org_archive"))
   ;;("\\.ipp\\'" (".hpp" ".cpp"))
   ;;("\\.hpp\\'" (".ipp" ".cpp"))
   ;;("\\.cxx\\'" (".hxx" ".ixx"))
   ;;("\\.ixx\\'" (".cxx" ".hxx"))
   ;;("\\.hxx\\'" (".ixx" ".cxx"))
   ;;("\\.c\\'" (".h"))
   ;;("\\.h\\'" (".c"))
   ))
 (setq-default ff-other-file-alist 'my-cpp-other-file-alist)


 (setq org-agenda-inhibit-startup t) ;; ~50x speedup

 (setq org-agenda-use-tag-inheritance nil) ;; 3-4x speedup


 (defun my-memacs-org-agenda ()
   "Opens an org-agenda with activated archive"
   (interactive)
   (memacs-chrome)
   (org-agenda-list)
   ;;(call-interactively 'org-agenda-log-mode)
   (org-agenda-log-mode '(4))
   (call-interactively 'org-agenda-archives-mode)
   (org-agenda-archives-mode 'files)
   )
 ;;disabled because I needed "m";; (bind-key "m" 'my-memacs-org-agenda my-map)
 (global-set-key "\C-cm" 'my-memacs-org-agenda)

 (defun zenburn ()
 "Activate zenburn theme."
 (interactive)
 (setq dark-theme t)
 (load-theme 'zenburn t))






 (setq load-dirs (concat user-emacs-directory "extra/"))
#+END_SRC


* expriment
#+BEGIN_SRC emacs-lisp
(defun abc/org-agenda-new ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-goto)
  (goto-char (point-max))
  (org-capture 0 "z"))
 ;; New key assignment
(define-key org-agenda-mode-map "z" 'abc/org-agenda-new)

(defun bulk-to-zd ()
  "Create a new note or task at the current agenda item.
Creates it at the same level as the previous task, so it's better to use
this with to-do items than with projects or headings."
  (interactive)
  (org-agenda-goto)
  (widen)
  (org-refile-to-zettelkasten-dir))


(defun notdeft-new-file (pfx)
  "Create a new file quickly.
Create it with an automatically generated name, one based
on the `notdeft-filter-string' filter string if it is non-nil.
With a prefix argument PFX, offer a choice of NotDeft
directories, when there is more than one of them.
With two prefix arguments, also offer a choice of filename
extensions when `notdeft-secondary-extensions' is non-empty.
Return the filename of the created file."
  (interactive "P")
  (let ((data (and notdeft-filter-string
		   (concat notdeft-filter-string "\n\n")))
	(notename
	 (and notdeft-filter-string
	      (notdeft-title-to-notename notdeft-filter-string))))
    (notdeft-sub-new-file data (concat (format-time-string "%Y-%m-%d-%H%M ") notename)) pfx))

(defun org-insert-link-with-default-description (file-name)
  (interactive (list (read-file-name "File: ")))
  (org-insert-link file-name file-name (file-name-nondirectory file-name)))


(setq grep-command "rg")

(defun my-save-and-kill-buffer ()
  (interactive)
  (save-buffer)
  (kill-buffer nil))




#+END_SRC
