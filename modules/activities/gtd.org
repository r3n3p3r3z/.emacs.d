* GTD Boxes
#+BEGIN_SRC emacs-lisp
 (defvar org-default-projects-dir   "~/org/projects"                     "Primary GTD directory")
 (defvar org-default-zettelkasten-dir "~/org/notes"                     "Directory of notes modeled after Zettelkasten includes an Archive, and Notes")
 (defvar org-default-completed-dir  "~/org/projects/completed"            "Directory of completed project files")
 (defvar org-default-inbox-file     "~/org/inbox.org"         "New stuff collects in this file")
 (defvar org-default-tasks-file     "~/org/tasks.org"           "Tasks, TODOs and little projects")
 (defvar org-default-incubate-file  "~/org/incubate.org"        "Ideas simmering on back burner")
 (defvar org-default-calendar-file  "~/org/calendar.org"        "Ideas simmering on back burner")
 (defvar org-default-delegate-file  "~/org/delegate.org"        "Ideas simmering on back burner")
 (defvar org-default-waiting-file  "~/org/waiting.org"        "Ideas simmering on back burner")
 (defvar org-default-completed-file nil                              "Ideas simmering on back burner")
 (defvar org-default-notes-file     "~/org/notes/inbox.org"   "Non-actionable, personal notes")

 ;(setq org-agenda-files (list org-default-projects-dir))
 ;(setq org-agenda-file-regexp "^[a-z0-9-_]+.org")


 (defhydra hydra-org-refiler (org-mode-map "C-c s" :hint nil)
     "
   ^Refile^       ^Calendar^            ^Ref^           ^Move^         ^Update^           ^Go To^ 
   ^^^^^^^^^^------------------------------------------------------------------------------------------
   _t_: tasks      _c c_: calendar  _z d_: web      _m p_: projects   _T_: todo       _g t_: tasks
   _i_: incubate   _c t_: tickler   _z w_: docs     _m n_: notes      _S_: schedule   _g i_: incubate
   _w_: waiting    _c d_: delegate  _z i_: images                   _D_: deadline   _g x_: inbox
   _r_: refile                                                  _R_: rename     _g w_: waiting
                                                                            _g p_: projects
                                                                            _g c_: completed
   "
     ("<up>" org-previous-visible-heading)
     ("<down>" org-next-visible-heading)
     ("k" org-previous-visible-heading)
     ("j" org-next-visible-heading)

     ("t" org-refile-to-task)
     ("i" org-refile-to-incubate)
    ("r" org-refile)
    ("w" org-refile-to-waiting)
    ("c c" refile-to-calendar)
    ("c t" refile-to-tickler)
    ("c d" org-refile-to-delegate)

    ("z d" note-to-documents)
    ("z w" note-to-websites)
    ("z i" note-to-images)

     ("m p" org-refile-to-projects-dir)
     ("m n" my/refile-to-zettelkasten)
     ("T" org-todo)
     ("S" org-schedule)
     ("D" org-deadline)
     ("R" org-rename-header)
     ("g t" (find-file org-default-tasks-file))
     ("g i" (find-file org-default-incubate-file))
     ("g w" (find-file org-default-waiting-file))
     ("g x" (find-file org-default-inbox-file))
     ("g c" (find-file org-default-completed-file))
     ("g p" (dired org-default-projects-dir))
     ("g c" (dired org-default-completed-dir))
     ("[\t]" (org-cycle))


     ("x" switch-to-dashboard "dashboard" :color blue)
     ("s" (org-save-all-org-buffers) "save")

     ("a" org-archive-subtree-as-completed "archive")
     ("d" org-cut-subtree "delete")
;     ("o" link-hint-open-link "open link")

     ("q" nil "quit"))



 (setq org-refile-use-outline-path 'file
       org-outline-path-complete-in-steps nil)

 ;; (setq org-refile-targets (append '((org-default-notes-file :level . 0))
 ;;                                  (->>
 ;;                                   (directory-files org-default-projects-dir nil ".org")
 ;;                                   (-remove-item (file-name-base org-default-notes-file))
 ;;                                   (--remove (s-starts-with? "." it))
 ;;                                   (--map (format "%s/%s" org-default-projects-dir it))
 ;;                                   (--map `(,it :level . 0)))))

 (defun org-subtree-region ()
   "Return a list of the start and end of a subtree."
   (save-excursion
     (list (progn (org-back-to-heading) (point))
           (progn (org-end-of-subtree)  (point)))))

 (defvar org-refile-directly-show-after nil
   "When refiling directly (using the `org-refile-directly'
 function), show the destination buffer afterwards if this is set
 to `t', otherwise, just do everything in the background.")

 (defun org-refile-directly (file-dest)
   "Move the current subtree to the end of FILE-DEST.
 If SHOW-AFTER is non-nil, show the destination window,
 otherwise, this destination buffer is not shown."
   (interactive "fDestination: ")

   (defun dump-it (file contents)
     (find-file-other-window file-dest)
     (goto-char (point-max))
     (insert "\n" contents))

   (save-excursion
     (let* ((region (org-subtree-region))
            (contents (buffer-substring (first region) (second region))))
       (apply 'kill-region region)
       (if org-refile-directly-show-after
           (save-current-buffer (dump-it file-dest contents))
         (save-window-excursion (dump-it file-dest contents))))))

 (defun org-refile-to-incubate ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-todo "HOLD")
   (org-refile-directly org-default-incubate-file)
   (kill-line)
   )

 (defun org-refile-to-waiting ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-todo "WAITING")
   (org-refile-directly org-default-waiting-file)
   (kill-line)
 )

 (defun org-refile-to-calendar ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-todo "TODO")
   (org-refile-directly org-default-calendar-file)
   (kill-line)

 )



 (defun org-refile-to-task ()
   "Refile (move) the current Org subtree to `org-default-tasks-file'."
   (interactive)
   (org-todo "TODO")
   (org-refile-directly org-default-tasks-file)
   (kill-line)
 )

 (defun org-refile-to-personal-notes ()
   "Refile (move) the current Org subtree to `org-default-notes-file'."
   (interactive)
   (org-refile-directly org-default-notes-file))

 (defun org-refile-to-completed ()
   "Refile (move) the current Org subtree to `org-default-completed-file',
 unless it doesn't exist, in which case, refile to today's journal entry."
   (interactive)
   (if (and org-default-completed-file (file-exists-p org-default-completed-file))
       (org-refile-directly org-default-completed-file)
     (org-refile-directly (get-journal-file-today))))

 (defun org-rename-header (label)
   "Rename the current section's header to LABEL, and moves the
 point to the end of the line."
   (interactive (list
                 (read-string "Header: "
                              (substring-no-properties (org-get-heading t t t t)))))
   (org-back-to-heading)
   (replace-string (org-get-heading t t t t) label))

 (defun org-archive-subtree-as-completed ()
   "Archives the current subtree to today's current journal entry."
   (interactive)
   (ignore-errors
     ;; According to the docs for `org-archive-subtree', the state should be
     ;; automatically marked as DONE, but I don't notice that:
     (when (not (equal "DONE" (org-get-todo-state)))
       (org-todo "DONE")))

   (let* ((org-archive-file (or org-default-completed-file
				(todays-journal-entry)))
          (org-archive-location (format "%s::" org-archive-file)))
      (org-archive-subtree)))

 (defun todays-journal-entry ()
   "Return the full pathname to the day's journal entry file.
 Granted, this assumes each journal's file entry to be formatted
 with year/month/day, as in `20190104' for January 4th.

 Note: `org-journal-dir' variable must be set to the directory
 where all good journal entries live, e.g. ~/journal."
   (let* ((daily-name   (format-time-string "%Y-%m-%d"))
          (file-name    (concat org-journal-dir daily-name)))
     (expand-file-name file-name)))

 ;; Attempt to load the extra library functions tangled from a different essay:
 (condition-case nil
     (load-library "boxes-extras")
   (error
    (defun org-refile-to-projects-dir ()
      (interactive)
      (message "Need to load the 'boxes-extra project first."))
    (defun org-refile-to-personal-dir ()
      (interactive)
      (message "Need to load the 'boxes-extra project first."))))

 (defun org-boxes-workflow ()
   "Load the default tasks file and start our hydra on the first task shown."
   (interactive)
   (let ((org-startup-folded nil))
     (find-file org-default-inbox-file)
     (delete-other-windows)
     (goto-char (point-min))
     (org-next-visible-heading 1)
     (hydra-org-refiler/body)))

 (defun org-agenda-workflow ()
   "Load the default tasks file and start our hydra on the first task shown."
   (interactive)
   (let ((org-startup-folded nil))
     (delete-other-windows)
     (ignore-errors
       (ha/org-agenda))
     (delete-other-windows)
     (hydra-org-agenda/body)))


 (defun ha/org-agenda ()
   "Displays my favorite agenda perspective."
   (interactive)
   (org-agenda nil "a"))

 (defun org-subtree-metadata ()
   "Return a list of key aspects of an org-subtree. Includes the
 following: header text, body contents, list of tags, region list
 of the start and end of the subtree."
   (save-excursion
     ;; Jump to the parent header if not already on a header
     (when (not (org-at-heading-p))
       (org-previous-visible-heading 1))

     (let* ((context (org-element-context))
            (attrs   (second context))
            (props   (org-entry-properties)))

       (list :region     (list (plist-get attrs :begin) (plist-get attrs :end))
             :header     (plist-get attrs :title)
             :tags       (org-get-subtree-tags props)
             :properties (org-get-subtree-properties attrs)
             :body       (org-get-subtree-content attrs)))))

 (defun org-get-subtree-tags (&optional props)
   "Given the properties, PROPS, from a call to
 `org-entry-properties', return a list of tags."
   (unless props
      (setq props (org-entry-properties)))
   (let ((tag-label (if org-get-subtree-tags-inherited "ALLTAGS" "TAGS")))
     (-some->> props
          (assoc tag-label)
          cdr
          substring-no-properties
          (s-split ":")
          (--filter (not (equalp "" it))))))

 (defvar org-get-subtree-tags-inherited t
   "Returns a subtree's tags, and all tags inherited (from tags
   specified in parents headlines or on the file itself). Defaults
   to true.")

 (defun org-get-subtree-properties (attributes)
   "Return a list of tuples of a subtrees properties where the keys are strings."

   (defun symbol-upcase? (sym)
     (let ((case-fold-search nil))
       (string-match-p "^:[A-Z]+$" (symbol-name sym))))

   (defun convert-tuple (tup)
     (let ((key (first tup))
           (val (second tup)))
       (list (substring (symbol-name key) 1) val)))

   (->> attributes
	(-partition 2)                         ; Convert plist to list of tuples
	(--filter (symbol-upcase? (first it))) ; Remove lowercase tuples
	(-map 'convert-tuple)))

 (defun org-get-subtree-content (attributes)
   "Return the contents of the current subtree as a string."
   (let ((header-components '(clock diary-sexp drawer headline inlinetask
                              node-property planning property-drawer section)))

       (goto-char (plist-get attributes :contents-begin))

       ;; Walk down past the properties, etc.
       (while
           (let* ((cntx (org-element-context))
                  (elem (first cntx))
                  (props (second cntx)))
             (when (member elem header-components)
               (goto-char (plist-get props :end)))))

       ;; At this point, we are at the beginning of what we consider
       ;; the contents of the subtree, so we can return part of the buffer:
       (buffer-substring-no-properties (point) (org-end-of-subtree))))

(defun org-refile-subtree-to-file (dir)
  "Archive the org-mode subtree and create an entry in the
directory folder specified by DIR. It attempts to move as many of
the subtree's properties and other features to the new file."
  (interactive "DDestination: ")
  (let* ((props      (org-subtree-metadata))
         (head       (plist-get props :header))
         (body       (plist-get props :body))
         (tags       (plist-get props :tags))
         (properties (plist-get props :properties))
         (area       (plist-get props :region))
         (filename   (org-filename-from-title head))
         (filepath   (format "%s/%s.org" dir filename)))
    (apply #'delete-region area)
    (org-create-org-file filepath head body tags properties)))

 (defun org-refile-notes-to-file (dir)
   "Archive the org-mode subtree and create an entry in the
 directory folder specified by DIR. It attempts to move as many of
 the subtree's properties and other features to the new file."
   (interactive "DDestination: ")
   (let* ((props      (org-subtree-metadata))
          (head       (plist-get props :header))
          (body       (plist-get props :body))
          (tags       (plist-get props :tags))
;          (properties (plist-get props :properties))
          (area       (plist-get props :region))
          (filename   (concat (format-time-string "%Y-%m-%d-%H%M%S")))
          (filepath   (format "%s/%s.org" dir filename)))
     (apply #'delete-region area)
     (org-create-notes-file filepath head body tags)))


(defun org-create-notes-file (filepath header body tags)
   "Create a new Org file by FILEPATH. The contents of the file is
 pre-populated with the HEADER, BODY and any associated TAGS."
   (find-file filepath)
   (org-set-file-property "TITLE" header t)
   (org-set-file-property "DATE" (format-time-string "[%Y-%m-%d %H:%M]"))
   (org-set-file-property "KEYWORDS" (s-join "" tags))
  (goto-char (point-min))
   (when (re-search-forward "REFILE" nil t)
    (replace-match ""))


   (delete-blank-lines)
   (goto-char (point-max))
  
   (insert "\n\n")
   (insert body)
   (goto-char (point-min))
   (save-buffer))



(defun org-create-org-file (filepath header body tags properties)
  "Create a new Org file by FILEPATH. The contents of the file is
pre-populated with the HEADER, BODY and any associated TAGS."
  (find-file-other-window filepath)
  (org-set-file-property "TITLE" header t)
  (org-set-file-property "CATEGORY" "project")
  (when tags
    (org-set-file-property "FILETAGS" (s-join " " tags)))

 ;;  Insert any drawer properties as #+PROPERTY entries:
    (when properties
    (goto-char (point-min))
    (or (re-search-forward "^\s*_\s$" nil t) (point-max))
    (--map (insert (format "#+PROPERTY: %s %s\n" (first it) (second it))) properties))

  ;; My auto-insert often adds an initial headline for a subtree, and in this
  ;; case, I don't want that... Yeah, this isn't really globally applicable,
  ;; but it shouldn't cause a problem for others.
  (when (re-search-forward "^\\* [0-9]$" nil t)
    (replace-match ""))

  (delete-blank-lines)
  (goto-char (point-max))
  (insert "\n")
  (insert "\n")
  (insert "* " header)
  (insert body))


 (defun org-filename-from-title (title)
   "Creates a useful filename based on a header string, TITLE.
 For instance, given the string:    What's all this then?
      This function will return:    whats-all-this-then"
   (let* ((no-letters (rx (one-or-more (not alphanumeric))))
          (init-try (->> title
                         downcase
                         (replace-regexp-in-string "'" "")
                         (replace-regexp-in-string no-letters "-"))))
     (string-trim init-try "-+" "-+")))

 (defun org-set-file-property (key value &optional spot)
   "Make sure file contains a top-level, file-wide property.
 KEY is something like `TITLE' or `FILETAGS'. This function makes
 sure that the property contains the contents of VALUE, and if the
 file doesn't have the property, it is inserted at either SPOT, or
 if nil,the top of the file."
   (save-excursion
     (goto-char (point-min))
     (let ((case-fold-search t))
       (if (re-search-forward (format "^#\\+%s:\s*\\(.*\\)" key) nil t)
           (replace-match value nil nil nil 1)

         (cond
          ;; if SPOT is a number, go to it:
          ((numberp spot) (goto-char spot))
          ;; If SPOT is not given, jump to first blank line:
          ((null spot) (progn (goto-char (point-min))
                              (re-search-forward "^\s*$" nil t)))
          (t (goto-char (point-min))))

         (insert (format "#+%s: %s\n" (upcase key) value))))))



 (defun org-refile-to-projects-dir ()
   "Move the current subtree to a file in the `projects' directory."
   (interactive)
   (org-refile-subtree-to-file org-default-projects-dir))

 (defun org-refile-to-technical-dir ()
   "Move the current subtree to a file in the `technical' directory."
   (interactive)
   (org-refile-subtree-to-file org-default-technical-dir))

 (defun org-refile-to-personal-dir ()
   "Move the current subtree to a file in the `personal' directory."
   (interactive)
   (org-refile-subtree-to-file org-default-personal-dir))

 (defun org-refile-to-zettelkasten-dir ()
   "Move the current subtree to a file in the `zettelkasten' directory."
   (interactive)
   (org-refile-notes-to-file org-default-zettelkasten-dir))

 ;; (defun org-refile-to-zettelkasten-dir ()
 ;;   "Move the current subtree to a file in the `zettelkasten' directory."
 ;;   (interactive)
 ;;   (org-refile-subtree-to-file org-default-zettelkasten-dir))




(defun org-refile-to-headline (file headline)
  (let ((pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile nil nil (list headline file nil pos))
    (switch-to-buffer (current-buffer))))


(defun org-refile-to-process ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-refile-directly "~/org/notes/process.org")
   (kill-line)
 )

(defun org-refile-to-cross-ref ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-refile-directly "~/org/notes/cross-reference.org")
   (kill-line)
 )


(defun note-to-websites ()
(interactive)
(org-refile-to-headline org-file-reference "Websites"))

(defun note-to-images ()
(interactive)
(org-refile-to-headline org-file-reference "Images"))

(defun note-to-videos ()
(interactive)
(org-refile-to-headline org-file-reference "Videos"))

(defun note-to-audio ()
(interactive)
(org-refile-to-headline org-file-reference "Audio"))

(defun note-to-documents ()
(interactive)
(org-refile-to-headline org-file-reference "Documents"))

(defun refile-to-tickler ()
(interactive)
(org-refile-to-headline org-file-calendar "Tickler"))

(defun refile-to-calendar ()
(interactive)
(org-refile-to-headline org-file-calendar "Calendar"))

(defun org-refile-to-delegate ()
   "Refile (move) the current Org subtree to `org-default-incubate-file'."
   (interactive)
   (org-todo "DELEGATE")
   (org-refile-directly org-default-delegate-file)
   (kill-line))



#+END_SRC
