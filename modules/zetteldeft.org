#+TITLE: Zetteldeft



#+BEGIN_SRC emacs-lisp

(defun zd-new-file (str &optional empty)
  "Create a new deft file.
Filename is `zd-id-format' appended by STR.
No file extension needed.

The title is inserted in `org-mode' format (unless EMPTY is true)
and the file name (without extension) is added to the kill ring.
When `evil' is loaded, enter instert state."
  (interactive (list (read-string "Note: ")))
  (let* ((zdId (zd-generate-id))
         (zdName (concat zdId " " str)))
  (deft-new-file-named zdName)
  (kill-new zdName)
  (insert (concat "#+DATE: " (format-time-string "[%Y-%m-%d %H:%M]")))
  (insert "\n#+FILETAGS: #inbox")
  (insert "\n#+KEYWORDS: ")
  (insert "\n\n* " str)
  (insert "\n\n\n\n\n\n")
  (insert "---\n*Related:*")
  (insert "\n\n\n\n")
  (insert "---\n*References:*")
  (goto-char (point-min))
  (forward-line 6)
  (olivetti-mode 1)
  (olivetti-set-width 120)
  (save-buffer)
  (when (featurep 'evil) (evil-emacs-state))))


 (load-file "~/.emacs.d/elpa/zetteldeft/zetteldeft.el")

(setq zd-link-indicator ">>>")


 (general-define-key
  :prefix "C-SPC"
  :keymaps 'override
  "d"  '(nil :wk "zetteldeft")
  "da"  '(nil :wk "web-tools")
  "dd" '(my-notdeft-global-map :wk "notdeft")
;  "n" '(notdeft-new-file-named :wk "new file")
  "dD" '(zd-deft-new-search :wk "new search")
  "dR" '(notdeft-refresh :wk "refresh")
  "ds" '(zd-search-at-point :wk "search at point")
  "dc" '(zd-search-current-id :wk "search current id")
  "df" '(zd-avy-file-search :wk "avy file search")
  "dF" '(zd-avy-file-search-ace-window :wk "avy file other window")
  "dl" '(zd-avy-link-search :wk "avy link search")
  "dt" '(zd-avy-tag-search :wk "avy tag search")
  "dT" '(zd-tag-buffer :wk "tag list")
  "dI" '(zd-find-file-id-insert :wk "insert id")
  "di" '(zd-find-file-full-title-insert :wk "insert full title")
  "do" '(zd-find-file :wk "find file")
;  "dn" '(zd-new-file :wk "new file")
  "dN" '(zd-new-file-and-link :wk "new file & link")
  "dr" '(zd-file-rename :wk "rename")
  )

 (defun zd-deft-new-search ()
   "Launch deft, clear filter and enter insert state."
   (interactive)
   (notdeft)
   (notdeft-filter-clear)
   (when (featurep 'evil) (evil-insert-state)))
 
 ;; (defun my/org-brain-goto-current ()
 ;;   "Jumps to a specific task."
 ;;   (interactive)
 ;;   (call-interactively 'org-brain-goto-current)
 ;;   (org-narrow-to-subtree)
 ;;  (forward-line 5))

(defun org-brain-set-keywords (entry)
  "Modify the ENTRY tags.
Use `org-set-tags' on headline ENTRY.
Instead sets #+FILETAGS on file ENTRY.
If run interactively, get ENTRY from context."
  (interactive (list (org-brain-entry-at-pt)))
  (if (org-brain-filep entry)
      (with-current-buffer (find-file-noselect (org-brain-entry-path entry))
        (let ((tag-str (read-string "KEYWORDS: "
                                    (mapconcat #'identity org-file-tags ":"))))
          (goto-char (point-min))
          (when (assoc "FILETAGS" (org-brain-keywords entry))
            (re-search-forward "^#\\+FILETAGS:")
            (kill-whole-line))
          (insert (format "#+KEYWORDS: %s\n" tag-str)))
        ;; From org.el
        (let ((org-inhibit-startup-visibility-stuff t)
              (org-startup-align-all-tables nil))
          (when (boundp 'org-table-coordinate-overlays)
            (mapc #'delete-overlay org-table-coordinate-overlays)
            (setq org-table-coordinate-overlays nil))
          (org-save-outline-visibility 'use-markers (org-mode-restart)))
        (save-buffer))
    (org-with-point-at (org-brain-entry-marker entry)
      (org-set-tags)
      (save-buffer)))
  (org-brain--revert-if-visualizing))



 (defun my/org-brain-add-parent (str &optional empty)
   "Create a new deft file.
 Filename is `zd-id-format' appended by STR.
 No file extension needed.

 The title is inserted in `org-mode' format (unless EMPTY is true)
 and the file name (without extension) is added to the kill ring.
 When `evil' is loaded, enter instert state."
   (interactive (list (read-string "name: ")))
   (let* ((zdId (zd-generate-id))
          (zdName (concat zdId " " str)))
     (deft-new-file-named zdName)
     (kill-new zdName)
     (unless empty (zd-insert-org-title))
     (dolist (parent-entry (org-brain-choose-entries
                            "Add parent: " (append (org-brain-files t)
                                                   (org-brain-headline-entries))))
       (org-brain-add-relationship parent-entry (org-brain-entry-at-pt))
       (org-brain--revert-if-visualizing))
     (forward-line 2)
     (kill-line)
     (goto-char (point-max))
     (when (featurep 'evil) (evil-insert-state))
     (save-buffer)))

 ;; (defun org-brain-add-child ()
 ;;   "Add external child to entry at point.
 ;; If chosen child entry doesn't exist, create it as a new file.
 ;; Several children can be added, by using `org-brain-entry-separator'."
 ;;   (interactive)
 ;;   (dolist (child-entry (org-brain-choose-entries
 ;;                         "Add child: " (append (org-brain-files t)
 ;;                                               (org-brain-headline-entries)
 ;;                                               (format-time-string "%Y-%m-%d-%H%M")))))
 ;;     (org-brain-add-relationship (org-brain-entry-at-pt) child-entry)
 ;;   (org-brain--revert-if-visualizing))

 ;; (defun org-brain-add-child ()
 ;;   "Add external child to entry at point.
 ;; If chosen child entry doesn't exist, create it as a new file.
 ;; Several children can be added, by using `org-brain-entry-separator'."
 ;;   (interactive)
 ;;   (dolist (child-entry (org-brain-choose-entries
 ;;                         "Add child: " (append (org-brain-files t)
 ;;                                               (org-brain-headline-entries)
 ;;                                               (format-time-string "%Y-%m-%d-%H%M"))))
 ;;     (org-brain-add-relationship (org-brain-entry-at-pt) child-entry))
 ;;   (org-brain--revert-if-visualizing))



 (defun org-brain-add-parent ()
   "Add a new parent to entry at point.
 If chosen parent entry doesn't exist, create it as a new file.
 Several parents can be added, by using `org-brain-entry-separator'."
   (interactive)
   (dolist (parent-entry (org-brain-choose-entries
                          "Add parent: " (append (org-brain-files t)
                                                 (org-brain-headline-entries))))
     (newline)
     (org-brain-add-relationship parent-entry (org-brain-entry-at-pt))
   (org-brain--revert-if-visualizing)))
 ;    (set-buffer (concat org-brain--vis-entry ".org"))
 ;    (goto-char (point-max))
 ;    (insert (concat zd-link-indicator (zd-lift-id parent-entry))))


 (defun org-brain-add-friendship ()
   "Add a new friend to entry at point.
 If chosen friend entry doesn't exist, create it as a new file.
 Several friends can be added, by using `org-brain-entry-separator'."
   (interactive)
   (dolist (friend-entry (org-brain-choose-entries
                          "Add friend: " (append (org-brain-files t)
                                                 (org-brain-headline-entries))))
     (org-brain--internal-add-friendship (org-brain-entry-at-pt) friend-entry))
 (org-brain--revert-if-visualizing))
 ;    (set-buffer (concat org-brain--vis-entry ".org"))
 ;    (goto-char (point-max))
 ;    (insert (concat zd-link-indicator (zd-lift-id friend-entry))))

 (defun efls/deft-open-other ()
   (interactive)
   (deft-open-file-other-window t))

 (defun efls/deft-open-preview ()
   (interactive)
   (deft-open-file-other-window))


 (with-eval-after-load 'deft
   (define-key deft-mode-map
     (kbd "<tab>") 'efls/deft-open-preview)
   (define-key deft-mode-map
     (kbd "<s-return>") 'efls/deft-open-other)
   (define-key deft-mode-map
     (kbd "s-j") 'evil-next-line)
   (define-key deft-mode-map (kbd "s-k") 'evil-previous-line))

 (setq deft-strip-summary-regexp
       (concat "\\("
               "[\n\t]" ;; blank
               "\\|^#\\+[a-zA-Z_]+:.*$" ;;org-mode metadata
               "\\)"))

#+END_SRC
