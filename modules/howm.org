#+TITLE: Howm - wiki-like note-taking tool



howm: Write fragmentarily and read collectively.

Howm is a note-taking tool on Emacs. It is similar to emacs-wiki.el; you can enjoy hyperlinks and full-text search easily. It is not similar to emacs-wiki.el; it can be combined with any format.


[[http://howm.osdn.jp/][howm: note-taking tool on Emacs]]

#+BEGIN_SRC emacs-lisp
(use-package howm
  :ensure t
  :config

(setq howm-template
"#+TITLE: %title%cursor
%date
,#+KEYWORDS:







Related:
%file



References:


")

(setq howm-file-name-format "%Y-%m-%d-%H%M%S.org")
(setq howm-template-date-format "#+DATE: [%Y-%m-%d %H:%M]")
(setq howm-directory "~/org/notes/")
(setq howm-view-preview-narrow nil)

(add-hook 'org-mode-hook 'howm-mode)
(add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))

(setq howm-view-title-header "#+TITLE:")

(setq howm-view-split-horizontally t)

(setq howm-menu-refresh-after-save nil)
(setq howm-menu-expiry-hours 6)  ;; cache menu N hours
(setq howm-menu-file "0000-00-00-000000.txt")  ;; don't *search*

(setq howm-view-use-grep t)
(setq howm-view-grep-command "rg")
(setq howm-view-grep-option "-nH --no-heading --color never")
(setq howm-view-grep-extended-option nil)
(setq howm-view-grep-fixed-option "-F")
(setq howm-view-grep-expr-option nil)
(setq howm-view-grep-file-stdin-option nil)

;; howm-menu
(defun howm-menu-with-j1 (orig-fun &rest args)
  (setq howm-view-grep-option "-nH --no-heading -j1 --color never")
  (apply orig-fun args)
  (setq howm-view-grep-option "-nH --no-heading --color never"))

(advice-add 'howm-menu-refresh :around #'howm-menu-with-j1)
0

(setq howm-view-search-in-result-correctly t)  ;; be aware of paragraph

(setq howm-view-list-title-type 2) ;; Show title before summary.
(setq howm-view-summary-format "") ;; If you want to delete file names.


 (defun howm-search-title (title)
   (interactive "sSearch title: ")
   (message title)
   (howm-search (format "^* +%s" (regexp-quote title)) nil))

(defun howm-list-grep-in-new-frame (&optional completion-p)
  (interactive "P")
  (select-frame (make-frame))
  (howm-list-grep completion-p))

     (defvar *howm-new-frame* nil)

(defun howm-new-frame ()
       (when *howm-new-frame*
         (select-frame (make-frame))))
     (add-hook 'howm-view-before-open-hook 'howm-new-frame)

(defun howm-open-new-frame (opener)
       ;; move cursor back from contents to summary in the original frame
       (let (new-frame)
         (save-window-excursion
           (let ((*howm-new-frame* t))
             (funcall opener))
           (setq new-frame (selected-frame)))
         (select-frame new-frame)))

     (defun howm-open-new-frame-summary ()
       (interactive)
       (howm-open-new-frame #'howm-view-summary-open-sub))

(defun howm-open-new-frame-contents ()
       (interactive)
       (howm-open-new-frame #'howm-view-contents-open-sub))
     (define-key howm-view-summary-mode-map
       "\M-\C-m" 'howm-open-new-frame-summary)
     (define-key howm-view-contents-mode-map
       "\M-\C-m" 'howm-open-new-frame-contents)

(defun howm-create-and-link (&optional which-template)
  (interactive "p")
  (let ((b (current-buffer))
        (p (point)))
    (prog1
        (howm-create which-template)
      (let ((f (buffer-file-name)))
        (when (and f (buffer-file-name b))
          (with-current-buffer b
            (goto-char p)
            (insert (format howm-template-file-format
                            (abbreviate-file-name f))
                    "\n")))))))

(defun howm-open-from-calendar ()
  (interactive)
  (require 'howm-mode)
  (let* ((mdy (calendar-cursor-to-date t))
         (m (car mdy))
         (d (second mdy))
         (y (third mdy))
         (ti (encode-time 0 0 0 d m y))
         (pc (howm-folder-get-page-create howm-directory (howm-file-name ti)))
         (page (car pc))
         (createp (cdr pc)))
   (other-window 1)
   (howm-page-open page)
   (if createp
       (howm-create-here)
     (howm-set-mode))))
(require 'calendar)
(define-key calendar-mode-map "c" 'howm-open-from-calendar)

(defun my-howm-switch-to-summary ()
  (interactive)
  (switch-to-buffer "*howmS*")
  (riffle-summary-check t))

;; (defun howm-set-directory (dir & optional keyfile)
;;   `(lambda ()
;;      (interactive)
;;      ;; kill current keyword buffer first to avoid the error
;;      "; howm-get-buffer-for-file: Buffer name` * howm-keys: * 'is in use "
;;      (kill-buffer (howm-keyword-buffer))
;;      (setq howm-directory, dir)
;;      (when, keyfile
;;        (setq howm-keyword-file, keyfile))
;;      (setq howm-menu-next-expiry-time (current-time))
;;      (message "% s", dir)))

;; ;; Switch and call the menu 
;; (defun howm-switch-directory (dir & optional keyfile)
;;   (funcall (howm-set-directory dir keyfile))
;;   (howm-menu))

;(global-set-key "\ Cc, 1" (howm-set-directory "~ / howm1" "~ / .howm1-keys"))
;(global-set-key "\ Cc, 2" (howm-set-directory "~ / howm2" "~ / .howm2-keys"))

;If you write the following in the menu, you can use the "1" and "2" keys from the menu

;% "1"% eval% (howm-switch-directory "~ / howm1" "~ / .howm1-keys")
;% "2"% eval% (howm-switch-directory "~ / howm2" "~ / .howm2-keys")

(add-hook 'howm-view-contents-mode-hook
          (lambda ()
            (setq default-directory howm-directory)
            (howm-mode 1)))
(defadvice riffle-contents-show (around howm-mode (item-list) activate)
  ad-do-it
  (when howm-mode
    (howm-initialize-buffer)))

;; C-i・M-C-i を「次・前の下線へ」に変更
(let ((m howm-view-contents-mode-map))
  (define-key m "\C-i" 'action-lock-goto-next-link)
  (define-key m "\M-\C-i" 'action-lock-goto-previous-link))

)


(defun howm-export-to-org ()
"Remove formatting and export to plain text
when in howmC view"
(interactive)
(copy-whole-buffer-to-clipboard)
(find-file   (concat "~/notes_export_" (format-time-string "%m-%d-%H%M%S") ".org"))
(yank)
(goto-char(point-min))
(replace-string  "#+TITLE: "  "* ")
(goto-char(point-min))
(replace-string "#+DATE: " "")
(goto-char(point-min))
(replace-string "#+KEYWORDS: " "")
(goto-char(point-min))
(replace-regexp "^==========================>>> .*$" ""))


(defun howm-insert-filename ()
  (interactive)
  (insert (concat ">>>" (file-name-base buffer-file-name))))


;; (defun my/howm-note ()
;;   "Add external child to entry at point.
;; If chosen child entry doesn't exist, create it as a new file.
;; Several children can be added, by using `org-brain-entry-separator'."
;;   (interactive)
;;   (let ((entry (org-brain-entry-identifier "zettelkasten"))
;;         (header (read-string "Note: "))
;;         (file (format-time-string "%Y-%m-%d-%H%M%S"))
;;         (date (format-time-string "%Y-%m-%d-%H %M%S")))
;;     (my/org-brain-add-relationship entry file header date))
;;   (howm-list-all)
;;   (howm-sort-items-by-date nil)
;;   (forward-line 1)
;;   (org-brain--revert-if-visualizing))


(defun my/howm-create (&optional which-template here)
  (interactive "p")
  (let* ((t-c (howm-create-default-title-content))
         (title (car t-c))
         (content (cdr t-c)))
    (howm-create-file-with-title title which-template nil here content)
    (insert "\n")
    (howm-insert-filename)
    (forward-line -1)
    (end-of-line)
    ))


(defun my/howm-view-brain ()
  (interactive)
(howm-view-summary-open)
(my/org-brain-visualize-current))

(defun my/howm-view-summary-open ()
(interactive)
(howm-view-summary-open)
(delete-other-windows))

(define-key howm-view-summary-mode-map (kbd "<f1>") 'my/howm-view-brain)
(define-key howm-view-summary-mode-map (kbd "<f1>") 'my/howm-view-brain)
(define-key howm-view-summary-mode-map [tab] 'howm-view-summary-open)
(define-key howm-view-summary-mode-map "\C-m" 'my/howm-view-summary-open)






#+END_SRC


