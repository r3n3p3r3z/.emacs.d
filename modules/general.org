#+TITLE: General: Convenience Wrappers for keybindings


 #+BEGIN_SRC emacs-lisp
(use-package general
  :ensure t
  :config
  (general-override-mode 1)
  :init

(general-define-key
 :keymaps 'key-translation-map
 "ESC" (kbd "C-g"))


  (general-create-definer tyrant-def
    :prefix "C-SPC")

  (tyrant-def

    ""     nil
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x")

    ;; Theme operations
    "t"   '(:ignore t :which-key "themes")

    "tn"  'my/cycle-theme
    "tt"  'load-theme
    "tz" 'zenburn

    "ts"  '(:ignore t :which-key "solarized")
    "tsl" 'load-solarized-light
    "tsd" 'load-solarized-dark

    ;; Quit operations
    "q"	  '(:ignore t :which-key "quit")
    "qq"  'kill-emacs
    "qz"  'delete-frame

    ;; Buffer operations
    "b"   '(:ignore t :which-key "buffers")
    "bb"  'ibuffer
    "bm"  'mode-line-other-buffer
    "bd"  'kill-this-buffer
    "bn"  'next-buffer
    "bp"  'previous-buffer
    "bq"  'kill-buffer-and-window
    "br"  'rename-file-and-buffer
    "bR"  'revert-buffer
    "be"  'safe-erase-buffer
    "bD"  'kill-other-buffers
    "bs"  'switch-to-scratch-buffer
    "b C-d" 'kill-matching-buffers-rudely
    "bE"    'safe-revert-buffer
    "bw"    'read-only-mode
    "bY"    'copy-whole-buffer-to-clipboard
    "bo" 'olivetti-mode

    ;; Window operations
    "w"   '(:ignore t :which-key "window")
    "wm"  'maximize-window
    "w/"  'split-window-horizontally
    "wv"  'split-window-vertically
    "wm"  'maximize-window
    "wu"  'winner-undo
    "ww"  'other-window
    "wd"  'delete-window
    "wD"  'delete-other-windows

    ;; File operations
    "f"   '(:ignore t :which-key "files")
    "fc"  'write-file

    "fj"  'dired-jump
    "fl"  'find-file-literally
    "fR"  'rename-file-and-buffer
    "fs"  'save-buffer


   "SPC" 'helm-M-x
   "bm"  'helm-mini
   "ff"  'helm-find-files
   "fr"  'helm-recentf
   "fL"  'helm-locate


    ;; Applications
    "a"   '(:ignore t :which-key "applications")
    "ad"  'dired
    "ac"  'calendar
    "ap"  'list-processes
    "af" 'elfeed
    "ar" 'ranger
    "ae"  'emms
    "ab" '(my/brain :wk "org-brain")

    "TAB"   'switch-to-previous-buffer
    "RET"   'hyperbole
    "r"   '(:ignore t :which-key "rifle")
    "rb" 'helm-org-rifle-brain
    "ra" 'helm-org-rifle-agenda-files
    "rr" 'helm-org-rifle

    "o"   '(:ignore t :which-key "org")
    "o#" 'org-agenda-list-stuck-projects
    "o/" 'org-occur-in-agenda-files
    "oo" 'org-agenda-list
    "oe" 'org-store-agenda-views
    "om" 'org-tags-view
    "oa" 'org-agenda
    "od" 'my/org-goto-current-datetree-entry
    "os" 'org-search-view
    "ot" 'org-todo-list
    ;; other
    "oO" 'org-clock-out
    "oc" 'org-capture
    "ol" 'org-store-link
    "oi" 'org-insert-link

    "og" 'my/org-jump-to-heading

    "e"   '(:ignore t :which-key "errors")
    "ec" 'flycheck-clear
    "eh" 'flycheck-describe-checker
    "el" 'toggle-flycheck-error-list
    "eL" 'goto-flycheck-error-list
    "ee" 'flycheck-explain-error-at-point
    "es" 'flycheck-select-checker
    "eS" 'flycheck-set-checker-executable
    "ev" 'flycheck-verify-setup
    "en"  'flycheck-next-error
    "ep"  'flycheck-previous-error


    ;; Search
    "s"   '(:ignore t :which-key "search")


    "j"   '(:ignore t :which-key "go to")
    "jb" 'avy-pop-mark
    "jj" 'avy-goto-char
    "jl" 'avy-goto-line
    "jr" 'jump-to-register
    "jw" 'avy-goto-word-or-subword-1
    "jo" 'link-hint-open-link
    "jO" 'link-hint-open-multiple-links

    "y"   '(:ignore t :which-key "yasnippet")
    "yi"  'yas-insert-snippet
    "yv"  'yas-visit-snippet-file
    "yn"  'yas-new-snippet

    "ow"   '(:ignore t :which-key "web-tools")
    "owa"  'org-web-tools-archive-attach
    "owo"   'org-web-tools-archive-view
    "owi" 'org-web-tools-insert-web-page-as-entry
    "owd" 'my/org-attach-download

    "m"   '(:ignore t :which-key "major-mode"))
)



#+END_SRC


#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<f1>"))
(global-unset-key (kbd "<f2>"))
(global-unset-key (kbd "<f3>"))
(global-unset-key (kbd "<f4>"))
(global-unset-key (kbd "<f5>"))
(global-unset-key (kbd "<f6>"))
(global-unset-key (kbd "<f7>"))
(global-unset-key (kbd "<f8>"))
(global-unset-key (kbd "<f9>"))
(global-unset-key (kbd "<f10>"))
(global-unset-key (kbd "<f11>"))
(global-unset-key (kbd "<f12>"))

#+END_SRC
