#+TITLE: org-brain

* org-brain
   #+BEGIN_SRC emacs-lisp
 (use-package org-brain :ensure t
 :config
 (setq org-brain-path "~/org/notes/")


 (setq org-id-track-globally t)
 (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
 (setq org-brain-visualize-default-choices 'root)

(setq org-brain-wander-interval 6)

(setq org-brain-data-file "/home/alexander/org/notes/.org-brain-data.el")


 (defun my/brain ()
 (interactive)
 (org-brain-visualize "zettelkasten")
 (delete-other-windows))


; (setq org-id-prefix ">>>")

 (defun my/org-add-ids-to-headlines-in-file ()
   "Add ID properties to all headlines in the current file which
 do not already have one."
   (interactive)
   (org-map-entries 'org-id-get-create))

(defun org-brain-entry-at-pt ()
  "Get current org-brain entry.
In `org-mode' this is the current headline, or the file.
In `org-brain-visualize' just return `org-brain--vis-entry'."
  (cond ((eq major-mode 'org-mode)
         (if (ignore-errors (org-get-heading))
             (if-let ((id (org-entry-get nil "ID")))
                 (org-brain-entry-from-id id)
               (error "Current headline have no ID"))
           (org-brain-path-entry-name (buffer-file-name))))
        ((eq major-mode 'org-brain-visualize-mode)
         org-brain--vis-entry)
        (t
         (error "Not in org-mode or org-brain-visualize"))))



(defun my/refile-to-zettelkasten (entry)
  "Convert headline ENTRY to a file entry.
Prompt for name of the new file.
If interactive, also prompt for ENTRY."
 (interactive (list (org-brain-entry-at-pt)))
  (let* (level
          (title (org-brain-title entry))
          (new-entry (concat (format-time-string "%Y-%m-%d-%H%M%S")))
          (path (org-brain-entry-path new-entry)))
    (when (file-exists-p path)
      (error "That file already exists"))
    (let ((parents (org-brain-parents entry))
          (external-parents (org-brain--linked-property-entries entry "PARENTS"))
          (children (org-brain--linked-property-entries entry "CHILDREN"))
          (friends (org-brain-friends entry))
          (hl-text (org-with-point-at (org-brain-entry-marker entry)
                     (setq level (org-outline-level))
                     (org-get-entry))))
      (dolist (parent external-parents)
        (org-brain-remove-relationship parent entry))
      (dolist (child children)
        (org-brain-remove-relationship entry child))
      (dolist (friend friends)
        (org-brain-remove-friendship entry friend))
      (org-with-point-at (org-brain-entry-marker entry)
        (org-cut-subtree)
        (pop kill-ring)
        (save-buffer))
      (make-directory (file-name-directory path) t)
      (with-temp-file path
        (insert (format "#+TITLE: %s\n" title))
        (insert (concat "#+DATE: " (format-time-string "[%Y-%m-%d %H:%M]\n")))
        (delay-mode-hooks
          (org-mode)
          (goto-char (point-min))
         (forward-line 3)
         (insert (format "#+KEYWORDS: \n\n"))
         (forward-line 4)
         (insert (format "%s\n" hl-text))
         (insert "\n")
         (goto-char (point-min))
          (re-search-forward org-property-drawer-re)
          (replace-match "")
          (goto-char (point-max))
          (let ((level-regex "^"))
            (dotimes (_i (1+ level))
              (setq level-regex (concat level-regex "\\*")))
            (setq level-regex (concat level-regex " "))
            (while (re-search-backward level-regex nil t)
              (dotimes (_i level) (org-promote-subtree))))))
      (dolist (parent parents)
        (org-brain-add-relationship "zettelkasten" new-entry))
      (dolist (child children)
        (org-brain-add-relationship new-entry "zettelkasten"))
      (dolist (friend friends)
        (org-brain--internal-add-friendship new-entry friend))
      (when (equal entry org-brain--vis-entry)
        (setq org-brain--vis-entry new-entry))
      (when (member entry org-brain-pins)
        (org-brain-pin entry -1)
        (org-brain-pin new-entry 1)))))



(defun my/headline-to-file (entry)
   "Convert headline ENTRY to a file entry.
 Prompt for name of the new file.
 If interactive, also prompt for ENTRY."
 (interactive (list (org-brain-entry-at-pt)))
   (let* (level
          (title (org-brain-title entry))
          (new-entry (concat (format-time-string "%Y-%m-%d-%H%M%S")))
          (path (org-brain-entry-path new-entry)))
     (when (file-exists-p path)
       (error "That file already exists"))
     (let ((parents (org-brain-parents entry))
           (external-parents (org-brain--linked-property-entries entry "PARENTS"))
           (children (org-brain--linked-property-entries entry "CHILDREN"))
           (friends (org-brain-friends entry))
           (hl-text (org-with-point-at (org-brain-entry-marker entry)
                      (setq level (org-outline-level))
                      (org-get-entry))))
       (dolist (parent external-parents)
         (org-brain-remove-relationship parent entry))
       (dolist (child children)
         (org-brain-remove-relationship entry child))
       (dolist (friend friends)
         (org-brain-remove-friendship entry friend))
       (org-with-point-at (org-brain-entry-marker entry)
         (org-cut-subtree)
         (pop kill-ring)
         (save-buffer))
       (make-directory (file-name-directory path) t)
      (with-temp-file path
        (insert (format "#+TITLE: %s\n" title))
        (insert (concat "#+DATE: " (format-time-string "[%Y-%m-%d %H:%M]\n")))
        (delay-mode-hooks
          (org-mode)
          (goto-char (point-min))
         (forward-line 3)
         (insert (format "#+KEYWORDS: \n\n"))
         (forward-line 4)
         (insert (format "%s\n" hl-text))
         (insert "\n")
         (goto-char (point-min))
          (re-search-forward org-property-drawer-re)
          (replace-match "")
          (goto-char (point-max))
          (let ((level-regex "^"))
            (dotimes (_i (1+ level))
              (setq level-regex (concat level-regex "\\*")))
            (setq level-regex (concat level-regex " "))
            (while (re-search-backward level-regex nil t)
              (dotimes (_i level) (org-promote-subtree))))))
       (dolist (parent parents)
         (org-brain-add-relationship parent new-entry))
       (dolist (child children)
         (org-brain-add-relationship new-entry child))
       (dolist (friend friends)
         (org-brain--internal-add-friendship new-entry friend))
       (when (equal entry org-brain--vis-entry)
         (setq org-brain--vis-entry new-entry))
       (when (member entry org-brain-pins)
         (org-brain-pin entry -1)
         (org-brain-pin new-entry 1)))
))





 (defun my/org-add-ids-to-headlines-in-file ()
   "Add ID properties to all headlines in the current file which
 do not already have one."
   (interactive)
   (org-map-entries 'org-id-get-create))



 (setq org-brain-visualize-default-choices 'all)
 (setq org-brain-title-max-length 100)

 (defun my/org-brain-goto-current ()
   "Jumps to a specific task."
   (interactive)
   (call-interactively 'org-brain-goto-current)
   (org-narrow-to-subtree)
  (forward-line 5))




(define-key org-brain-visualize-mode-map (kbd "SPC") #'link-hint-open-link)
(define-key org-brain-visualize-mode-map (kbd "TAB") 'my/org-brain-goto-current)

(define-key org-brain-visualize-mode-map (kbd "s") 'org-brain-save-and-update)

(define-key org-brain-visualize-mode-map "c" 'my/org-brain-add-child)
(define-key org-brain-visualize-mode-map "C" 'org-brain-add-child)


(defun org-brain-save-and-update ()
  (interactive)
  (org-brain-update-id-locations)
  (org-save-all-org-buffers)
  (org-brain--revert-if-visualizing))

 (defun org-brain-cliplink-resource ()
 "Add a URL from the clipboard as an org-brain resource.
 Suggest the URL title as a description for resource."
 (interactive)
 (let ((url (org-cliplink-clipboard-content)))
 (org-brain-add-resource
 url
 (org-cliplink-retrieve-title-synchronously url)
 t)))

(defun my/org-brain-add-child-headline ()
  "Create a new internal child headline to entry at point.
Several children can be created, by using `org-brain-entry-separator'."
  (interactive)
  (let ((entry (org-brain-entry-at-pt))
        (child-name-string (read-string "Add child headline: ")))
    (dolist (child-name (split-string child-name-string org-brain-entry-separator))
      (when (equal (length child-name) 0)
        (error "Child name must be at least 1 character"))
      (if (org-brain-filep entry)
          ;; File entry
          (with-current-buffer (find-file-noselect (org-brain-entry-path entry))
            (goto-char (point-min))
            (if (re-search-forward (concat "^\\(" org-outline-regexp "\\)") nil t)
                (progn
                  (beginning-of-line)
                  (open-line 1))
              (goto-char (point-max)))
            (insert (concat "* " child-name))
            (insert (concat "\n"))
            (org-id-get-create)
            (insert (concat "\n\n"))
          (insert (concat "Related Notes:\n\n"))
          (insert (concat "\n\n\n"))
          (insert (concat "Reference:\n\n"))
          (run-hooks 'org-brain-new-entry-hook)
            (save-buffer))
        ;; Headline entry
        (org-with-point-at (org-brain-entry-marker entry)
          (if (org-goto-first-child)
              (open-line 1)
            (org-end-of-subtree t))
          (org-insert-heading nil t)
          (org-do-demote)
          (insert child-name)
          (org-id-get-create)
          (run-hooks 'org-brain-new-entry-hook)
          (save-buffer)))))
  (org-brain--revert-if-visualizing))


 (setq org-brain-visualize-mode-hook #'delete-other-windows)

 (defun org-brain-open-org-noter (entry)
   "Open `org-noter' on the ENTRY.
 If run interactively, get ENTRY from context."
   (interactive (list (org-brain-entry-at-pt)))
   (org-with-point-at (org-brain-entry-marker entry)
     (org-noter))))


(defun org-brain-set-tags (entry)
  "Modify the ENTRY tags.
Use `org-set-tags' on headline ENTRY.
Instead sets #+KEYWORDS on file ENTRY.
If run interactively, get ENTRY from context."
  (interactive (list (org-brain-entry-at-pt)))
  (if (org-brain-filep entry)
      (with-current-buffer (find-file-noselect (org-brain-entry-path entry))
        (let ((tag-str (read-string "KEYWORDS: "
                                    (mapconcat #'identity org-file-tags ":"))))
          (goto-char (point-min))
          (when (assoc "KEYWORDS" (org-brain-keywords entry))
            (re-search-forward "^#\\+KEYWORDS:")
            (kill-whole-line))
          (insert (format "#+KEYWORDS: %s\n" tag-str)))
        ;; From org.el
        (let ((org-inhibit-startup-visibility-stuff t)
              (org-startup-align-all-tables nil))
          (when (boundp 'org-table-coordinate-overlays)
            (mapc #'delete-overlay org-table-coordinate-overlays)
            (setq org-table-coordinate-overlays nil))
          (org-save-outline-visibility 'use-markers (org-mode-restart)))
        (save-buffer))
    (org-with-point-at (org-brain-entry-marker entry)
      (org-set-tags)
      (save-buffer)))
  (org-brain--revert-if-visualizing))



(defun my/org-brain-add-child ()
  "Add external child to entry at point.
If chosen child entry doesn't exist, create it as a new file.
Several children can be added, by using `org-brain-entry-separator'."
  (interactive)
  (let ((entry (org-brain-entry-at-pt))
        (header (read-string "Add child: "))
        (file (format-time-string "%Y-%m-%d-%H%M%S"))
        (date (format-time-string "%Y-%m-%d-%H %M%S")))
    (my/org-brain-add-relationship entry file header date))
  (org-brain--revert-if-visualizing))



(defun my/org-brain-add-relationship (parent child title date)
  "Add external relationship between PARENT and CHILD."
  (when (equal parent child)
    (error "An entry can't be a parent/child to itself"))
  (unless (member child (org-brain-children parent))
    (if (org-brain-filep parent)
        ;; Parent = File
        (with-current-buffer (find-file-noselect (org-brain-entry-path parent))
          (goto-char (point-min))
          (if (re-search-forward "^#\\+CHILDREN:.*$" nil t)
              (insert (concat " " (org-brain-entry-identifier child)))
            (insert (concat "#+CHILDREN: "
                            (org-brain-entry-identifier child)
                            "\n\n")))
          (save-buffer))
      ;; Parent = Headline
      (org-entry-add-to-multivalued-property (org-brain-entry-marker parent)
                                             "CHILDREN"
                                             (org-brain-entry-identifier child)))
    (if (org-brain-filep child)
        ;; Child = File
        (with-current-buffer (find-file-noselect (org-brain-entry-path child))
          (goto-char (point-min))
          (if (re-search-forward "^#\\+PARENTS:.*$" nil t)
              (insert (concat " " (org-brain-entry-identifier parent)))
                        (insert (concat "#+PARENTS: "
                            (org-brain-entry-identifier parent)
                            "\n\n"))

                        (insert (concat"#+TITLE: " title ))
                        (insert "\n")
                        (insert (concat ">>>" (file-name-base buffer-file-name)))
                        (insert "\n")
                        (insert (concat "#+DATE: " (format-time-string "[%Y-%m-%d %H:%M]\n")))
                        (insert "#+KEYWORDS: ")
                        (insert "\n\n\n\n\n\n")
                        (insert "Related:")
                        (insert "\n\n\n\n")
                        (insert "References:")

                        

            )
         (save-buffer))
      ;; Child = Headline
      (org-entry-add-to-multivalued-property (org-brain-entry-marker child)
                                             "PARENTS"
                                             (org-brain-entry-identifier parent)))))

(defun my/org-brain-visualize-current ()
  (interactive)
  (org-brain-visualize (org-brain-entry-at-pt))
  (delete-other-windows))

(defun my/org-brain-goto-current-main ()
  (interactive)
  (org-brain-goto-current (org-brain-entry-at-pt))
  (delete-other-windows))

(define-key org-brain-visualize-mode-map (kbd "<f1>") 'my/org-brain-goto-current-main)




#+END_SRC
