#+TITLE: Hydra



  #+BEGIN_SRC emacs-lisp
 (use-package hydra
   :ensure t
   :defer 0.5
   :config

 ;; Hydra for org agenda (graciously taken from Spacemacs)
 (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                  :post (setq which-key-inhibit nil)
                                  :hint none)
   "
 Org agenda (_q_uit)

 ^Clock^        ^Visit entry^              ^Date^             ^Other^
 ^-----^------  ^-----------^------------  ^----^-----------  ^-----^---------
 _ci_ in        _SPC_ in other window      _ds_ schedule      _gr_ reload
 _co_ out       _TAB_ & go to location     _dd_ set deadline  _._  go to today
 _cq_ cancel    _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
 _cj_ jump      _o_   link                 _+_  do later      ^^
 _cp_ pomodoro                    
 ^^           ^^                         _-_  do earlier    ^^
 ^^           ^^                         ^^                 ^^
 ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
 ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
 _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
 _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
 _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
 _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
 _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
 _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
 _vp_ prev span  ^^                       ^^                 ^^
 _vr_ reset      ^^                       ^^                 ^^
 ^^              ^^                       ^^                 ^^
 "

   ("<up>" org-agenda-previous-line)
   ("<down>" org-agenda-next-line)
   ("k" org-agenda-previous-line)
   ("j" org-agenda-next-line)
   ("w" (other-window 1))
   ;; Entry
   ("hA" org-agenda-archive-default)
   ("hk" org-agenda-kill)
   ("hp" org-agenda-priority)
   ("hr" org-agenda-refile)
   ("h:" org-agenda-set-tags)
   ("ht" org-agenda-todo)
   ;; Visit entry
   ("o"   link-hint-open-link :exit t)
   ("<tab>" org-agenda-goto :exit t)
   ("TAB" org-agenda-goto :exit t)
   ("SPC" org-agenda-show-and-scroll-up)
   ("RET" org-agenda-switch-to :exit t)
   ;; Date
   ("dt" org-agenda-date-prompt)
   ("dd" org-agenda-deadline)
   ("+" org-agenda-do-date-later)
   ("-" org-agenda-do-date-earlier)
   ("ds" org-agenda-schedule)
   ;; View
   ("vd" org-agenda-day-view)
   ("vw" org-agenda-week-view)
   ("vt" org-agenda-fortnight-view)
   ("vm" org-agenda-month-view)
   ("vy" org-agenda-year-view)
   ("vn" org-agenda-later)
   ("vp" org-agenda-earlier)
   ("vr" org-agenda-reset-view)
   ;; Toggle mode
   ("ta" org-agenda-archives-mode)
   ("tA" (org-agenda-archives-mode 'files))
   ("tr" org-agenda-clockreport-mode)
   ("tf" org-agenda-follow-mode)
   ("tl" org-agenda-log-mode)
   ("td" org-agenda-toggle-diary)
   ;; Filter
   ("fc" org-agenda-filter-by-category)
   ("fx" org-agenda-filter-by-regexp)
   ("ft" org-agenda-filter-by-tag)
   ("fr" org-agenda-filter-by-tag-refine)
   ("fh" org-agenda-filter-by-top-headline)
   ("fd" org-agenda-filter-remove-all)
   ;; Clock
   ("cq" org-agenda-clock-cancel)
   ("cj" org-agenda-clock-goto :exit t)
   ("ci" org-agenda-clock-in :exit t)
   ("co" org-agenda-clock-out)
   ("cp" org-pomodoro)
   ;; Other
   ("q" nil :exit t)
   ("gd" org-agenda-goto-date)
   ("." org-agenda-goto-today)
   ("gr" org-agenda-redo))


   (defhydra hydra-registers (:color blue
                                     :hint nil)
     "
 _a_: append     _c_: copy-to    _j_: jump       _r_: rectangle-copy   _q_: quit
 _i_: insert     _n_: number-to  _f_: frameset   _w_: window-config
 _+_: increment  _p_: point-to
 "
     ("a" append-to-register)
     ("c" copy-to-register)
     ("i" insert-register)
     ("f" frameset-to-register)
     ("j" jump-to-register)
     ("n" number-to-register)
     ("r" copy-rectangle-to-register)
     ("w" window-configuration-to-register)
     ("+" increment-register)
     ("p" point-to-register)
     ("q" nil :color blue))


   (defhydra hydra-clock (:color blue)
     "
 ^
 ^Clock^             ^Do^
 ^─────^─────────────^──^─────────
 _q_ quit            _C_ cancel
 ^^                  _d_ default task
 ^^                  _I_ recent task
 ^^                  _i_ in
 ^^                  _o_ out
 ^^                  _j_ jump-current
 ^^                  _e_ effort
 ^^                  _r_ report
 ^^                  ^^
 "
     ("q" nil)
     ("C" org-clock-cancel)
     ("d" bh/clock-in-organization-task-as-default)
     ("I" my/org-clock-in)
     ("i" org-clock-in)
     ("o" org-clock-out)
     ("j" org-clock-goto)
     ("r" org-clock-report)
     ("e" org-clock-modify-effort-estimate)
     )

   (defhydra hydra-projectile (:hint nil)
     "
 ^
 ^Projectile^        ^Buffers^           ^Find^              ^Search^
 ^──────────^────────^───────^───────────^────^──────────────^──────^────────────
 _q_ quit            _b_ list            _d_ directory       _r_ replace
 _i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
 ^^                  _S_ save all        _f_ file            _s_ ag
 ^^                  ^^                  _p_ project         ^^
 ^^                  ^^                  ^^                  ^^
 "
     ("q" nil)
     ("b" counsel-projectile-switch-to-buffer)
     ("d" counsel-projectile-find-dir)
     ("D" projectile-dired)
     ("f" counsel-projectile-find-file)
     ("i" projectile-invalidate-cache :color red)
     ("K" projectile-kill-buffers)
     ("p" counsel-projectile-switch-project)
     ("r" projectile-replace)
     ("R" projectile-replace-regexp)
     ("s" counsel-projectile-ag)
     ("S" projectile-save-project-buffers)))


  #+END_SRC
